################################
#
# Galaxy of the Cat Events
#
###############################
namespace = gotc

# Collided planet starting system
# on_game_start_country
event = {
	id = gotc.1

	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes

	immediate = {
		random_playable_country = {
			limit = {
				capital_scope = { solar_system = { has_star_flag = kira_starting_system } }
			}
			save_event_target_as = collided_planet_country
			capital_scope = {
				solar_system = {
					random_neighbor_system = {
						limit = {
							has_star_flag = neighbor_t1_first_colony
							has_star_flag = system_of_kira
						}
						random_system_planet = {
							limit = {
								has_planet_flag = prescripted_ideal
								has_planet_flag = planet_of_kira
								is_colonizable = yes
								is_colony = no
								pop_amount = 0
							}
							prev = { set_name = "Система Кирина" }
							set_planet_flag = gotc_temp_planet
							save_event_target_as = gotc_temp_planet
						}
						if = {
							limit = { any_system_planet = { has_planet_flag = gotc_temp_planet } }
							if = {
								limit = { event_target:collided_planet_country = { ideal_planet_class = pc_arid } }
								spawn_planet = {
									class = pc_arid
									location = event_target:gotc_temp_planet
									size = { min = 25 max = 30 }
									has_ring = yes
									entity = "collided_planet_entity"
									deposit_blockers = none
									modifiers = none

									init_effect = { planet_of_kira_init_effect = yes }
								}
							}
							else_if = {
								limit = { event_target:collided_planet_country = { ideal_planet_class = pc_desert } }
								spawn_planet = {
									class = pc_desert
									location = event_target:gotc_temp_planet
									size = { min = 25 max = 30 }
									has_ring = yes
									entity = "collided_planet_entity"
									deposit_blockers = none
									modifiers = none

									init_effect = { planet_of_kira_init_effect = yes }
								}
							}
							else_if = {
								limit = { event_target:collided_planet_country = { ideal_planet_class = pc_savannah } }
								spawn_planet = {
									class = pc_savannah
									location = event_target:gotc_temp_planet
									size = { min = 25 max = 30 }
									has_ring = yes
									entity = "collided_planet_entity"
									deposit_blockers = none
									modifiers = none

									init_effect = { planet_of_kira_init_effect = yes }
								}
							}
							else_if = {
								limit = { event_target:collided_planet_country = { ideal_planet_class = pc_ocean } }
								spawn_planet = {
									class = pc_ocean
									location = event_target:gotc_temp_planet
									size = { min = 25 max = 30 }
									has_ring = yes
									entity = "collided_planet_entity"
									deposit_blockers = none
									modifiers = none

									init_effect = { planet_of_kira_init_effect = yes }
								}
							}
							else_if = {
								limit = { event_target:collided_planet_country = { ideal_planet_class = pc_continental } }
								spawn_planet = {
									class = pc_continental
									location = event_target:gotc_temp_planet
									size = { min = 25 max = 30 }
									has_ring = yes
									entity = "collided_planet_entity"
									deposit_blockers = none
									modifiers = none

									init_effect = { planet_of_kira_init_effect = yes }
								}
							}
							else_if = {
								limit = { event_target:collided_planet_country = { ideal_planet_class = pc_tropical } }
								spawn_planet = {
									class = pc_tropical
									location = event_target:gotc_temp_planet
									size = { min = 25 max = 30 }
									has_ring = yes
									entity = "collided_planet_entity"
									deposit_blockers = none
									modifiers = none

									init_effect = { planet_of_kira_init_effect = yes }
								}
							}
							else_if = {
								limit = { event_target:collided_planet_country = { ideal_planet_class = pc_tundra } }
								spawn_planet = {
									class = pc_tundra
									location = event_target:gotc_temp_planet
									size = { min = 25 max = 30 }
									has_ring = yes
									entity = "collided_planet_entity"
									deposit_blockers = none
									modifiers = none

									init_effect = { planet_of_kira_init_effect = yes }
								}
							}
							else_if = {
								limit = { event_target:collided_planet_country = { ideal_planet_class = pc_alpine } }
								spawn_planet = {
									class = pc_alpine
									location = event_target:gotc_temp_planet
									size = { min = 25 max = 30 }
									has_ring = yes
									entity = "collided_planet_entity"
									deposit_blockers = none
									modifiers = none

									init_effect = { planet_of_kira_init_effect = yes }
								}
							}
							else_if = {
								limit = { event_target:collided_planet_country = { ideal_planet_class = pc_arctic } }
								spawn_planet = {
									class = pc_arctic
									location = event_target:gotc_temp_planet
									size = { min = 25 max = 30 }
									has_ring = yes
									entity = "collided_planet_entity"
									deposit_blockers = none
									modifiers = none

									init_effect = { planet_of_kira_init_effect = yes }
								}
							}
							else = {
								spawn_planet = {
									class = pc_toxic
									location = event_target:gotc_temp_planet
									size = { min = 25 max = 30 }
									has_ring = yes
									entity = "collided_planet_entity"
									deposit_blockers = none
									modifiers = none

									init_effect = {
										set_planet_flag = toxic_terraforming_candidate
										add_modifier = { modifier = toxic_terraforming_candidate }
										planet_of_kira_init_effect = yes
									}
								}
							}
							event_target:gotc_temp_planet = {
								remove_planet = yes
							}
						}
					}
				}
			}
		}
	}
}

# eu federation remove subsidies modifier
system_event = { # Event is formally tied to solar system
	id = gotc.2

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_federation = { has_federation_perk = eu_federation_passive }
	}

	immediate = {
		random_federation = {
			limit = { has_federation_perk = eu_federation_passive }
			every_member = {
				limit = { has_country_flag = gotc_subsidized_federation_member }
				remove_modifier = gotc_eu_federation_subsidies_bonus
			}
			federation_leader = {
				capital_scope = {
					solar_system = {
						system_event = { id = gotc.3 days = 1 }
					}
				}
			}
		}
	}
}

# eu federation subsidies distribution
system_event = { # Event is formally tied to solar system
	id = gotc.3

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_federation = { has_federation_perk = eu_federation_passive }
	}

	immediate = {
		random_federation = {
			limit = { has_federation_perk = eu_federation_passive }

			# count federation members
			set_variable = {
				which = counted_federation_members
				value = 0
			}
			every_member = {
				prev = {
					change_variable = {
						which = counted_federation_members
						value = 1
					}
				}
			}

			# calculate total GDP
			set_variable = {
				which = eu_federation_total_gdp
				value = 0
			}
			every_member = {
				eu_federation_count_gdp = yes
				prev = {
					change_variable = {
						which = eu_federation_total_gdp
						value = event_target:seq_eu_member.eu_member_gdp
					}
				}
			}

			# calculate average GDP
			set_variable = {
				which = eu_federation_average_gdp
				value = eu_federation_total_gdp
			}
			divide_variable = {
				which = eu_federation_average_gdp
				value = counted_federation_members
			}

			# count subsidized federation members
			set_variable = {
				which = counted_subsidized_federation_members
				value = 0
			}
			every_member = {
				remove_country_flag = gotc_subsidized_federation_member
				if = {
					limit = {
						check_variable_arithmetic = {
							which = eu_member_gdp
							value < prev.eu_federation_average_gdp
						}
					}
					set_country_flag = gotc_subsidized_federation_member
					prev = {
						change_variable = {
							which = counted_subsidized_federation_members
							value = 1
						}
					}
				}
			}

			# calculate total GDP of subsidized countries
			set_variable = {
				which = eu_federation_subsidized_countries_gdp
				value = 0
			}
			every_member = {
				limit = { has_country_flag = gotc_subsidized_federation_member }
				save_event_target_as = temp_subsidized_federation_member
				prev = {
					change_variable = {
						which = eu_federation_subsidized_countries_gdp
						value = event_target:temp_subsidized_federation_member.eu_member_gdp
					}
				}
			}

			# calculate the amount of subsidies
			set_variable = {
				which = eu_federation_subsidies_amount
				value = eu_federation_total_gdp
			}
			divide_variable = {
				which = eu_federation_subsidies_amount
				value = 8.2 # lost 10 percent of GDP
			}

			# calculate the amount of subsidies per member and redistribute it
			every_member = {
				limit = { has_country_flag = gotc_subsidized_federation_member }
				set_variable = {
					which = eu_member_gdp_subsidies_amount
					value = eu_member_gdp
				}
				divide_variable = {
					which = eu_member_gdp_subsidies_amount
					value = prev.eu_federation_subsidized_countries_gdp
				}
				multiply_variable = {
					which = eu_member_gdp_subsidies_amount
					value = prev.eu_federation_subsidies_amount
				}
				add_modifier = {
					modifier = gotc_eu_federation_subsidies_bonus
					multiplier = eu_member_gdp_subsidies_amount
				}
			}

			# next distribution cycle
			federation_leader = {
				capital_scope = {
					solar_system = {
						random_list = {
							1 = {
								system_event = { id = gotc.2 days = 269 }
							}
							1 = {
								system_event = { id = gotc.2 days = 299 }
							}
							1 = {
								system_event = { id = gotc.2 days = 329 }
							}
							1 = {
								system_event = { id = gotc.2 days = 359 }
							}
							1 = {
								system_event = { id = gotc.2 days = 389 }
							}
							1 = {
								system_event = { id = gotc.2 days = 419 }
							}
							1 = {
								system_event = { id = gotc.2 days = 449 }
							}
						}
					}
				}
			}
		}
	}
}

# kadyrov
planet_event = {
	id = gotc.4000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		solar_system = { has_star_flag = kadyrov }
	}

	immediate = {

		add_district_and_planet_size_if_needed_effect = {
			district = district_farming_uncapped
		}

		# We want a clean slate building-wise, but to keep the districts.
		remove_all_buildings = yes
		if = {
			limit = {
				owner = { is_subject = yes }
			}
			add_planet_devastation = 50
			add_modifier = {
				modifier = payback_debris_field
				days = 2880 # 8 years
			}
		}
		else = {
			add_planet_devastation = 33
			add_modifier = {
				modifier = payback_debris_field
				days = 2880 # 8 years
			}
			add_modifier = {
				modifier = payback_unified_purpose
				days = 7200
				clear_on_owner_change = yes
			}
		}
		while = {
			count = 6
			add_deposit = d_ship_debris_payback_blocker
		}
		# 3 jobs
		add_building = building_capital
		add_building = building_medical_2
		add_building = building_research_lab_1
		ruin_building = building_research_lab_1
		add_building = building_mineral_purification_plant
		ruin_building = building_mineral_purification_plant
		add_building = building_energy_grid
		ruin_building = building_energy_grid

		# ambient objects, for decoration
		set_planet_flag = has_orbital_debris
		create_ambient_object = {
			type = "ancient_battlefield_object"
			use_3d_location = yes
			entity_offset_height = 10
			location = this
		}
		create_ambient_object = {
			type = "ancient_battlefield_02_object"
			use_3d_location = yes
			entity_offset_height = 0
			location = this
		}
		while = {
			count = 5
			create_ambient_object = {
				type = "small_debris_object"
				use_3d_location = yes
				entity_offset_height = { min = 10 max = -10 }
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 200
					angle = random
				}
			}
		}
		while = {
			count = 5
			create_ambient_object = {
				type = "abandoned_ship_2_object"
				use_3d_location = no
				entity_offset_height = { min = 20 max = -20 }
				location = this
			}
			last_created_ambient_object = {
				set_location = {
					target = prev
					distance = 150
					angle = random
				}
			}
		}
		if = {
			limit = {
				pop_amount > 1800
			}
			while = {
				limit = { pop_amount > 1800 }
				random_owned_pop_group = {
					limit = { is_same_species = root.owner.species }
					kill_single_pop = yes
				}
			}
		}
		solar_system = {
			system_event = {
				id = gotc.4001
				days = 23040
			}
		}
	}
}

system_event = {
	id = gotc.4001
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		every_system_ambient_object = {
			limit = {
				OR = {
					is_ambient_object_type = ancient_battlefield_object
					is_ambient_object_type = ancient_battlefield_02_object
					is_ambient_object_type = small_debris_object
					is_ambient_object_type = abandoned_ship_2_object
				}
			}
			destroy_ambient_object = this
		}
		random_system_planet = {
			limit = { has_planet_flag = has_orbital_debris }
			remove_planet_flag = has_orbital_debris
		}
	}
}

#########################
# TEACHERS OF THE SHROUD
#########################

# Start / Setup event
country_event = {
	id = gotc.5601

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_imperial_vassal
        capital_scope = { solar_system = { has_star_flag = mraxist } }
		exists = event_target:shroudwalker_enclave_country #set up in initializers
	}

	immediate = {
		# Have met aliens (the Shroudwalkers)
		set_country_flag = first_contact_event
		set_country_flag = Story2 # Already encountered spacefarers

		# Get to know the Shroudwalkers from the start
		establish_communications_no_message = event_target:shroudwalker_enclave_country

		# Set up all necessary country flags
		set_country_flag = shroudwalker_enclave_diplomacy_engaged
		set_country_flag = shroudwalker_enclave_bought_shroud_beacon

		every_system = {
			limit = {
				has_star_flag = shroudwalker_enclave_system
			}
			root = { set_visited = prev }
		}
		if = {
			limit = {
				capital_star.solar_system = {
					any_system_planet = {
						uninhabitable_regular_planet = yes
					}
				}
			}
			capital_star.solar_system = {
				while = {
					count = 2
					random_system_planet = {
						limit = {
							uninhabitable_regular_planet = yes
							NOT = { has_modifier = terraforming_candidate }
						}
						weights = {
							base = 1
							modifier = {
								add = trigger:planet_size
							}
						}
						change_pc = pc_shrouded
						clear_planet_modifiers = yes
						clear_deposits = yes
					}
				}
			}
		}

		# Let them start researching Psionic Theory from the get-go
		add_research_option = tech_psionic_theory
    }
}

# Previous Leader dies, succession crisis
country_event = { # Overlord version
	id = gotc.5720

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_imperial_vassal_overlord
	}

	immediate = {
		heir = {
			save_event_target_as = overlord_heir
		}
		ruler = {
			save_event_target_as = overlord_ruler
			kill_leader = { show_notification = no }
		}
		country_event = {
			id = gotc.5729
			days = 10 #360
			#random = 1440
		}
		every_subject = {
			country_event = {
				id = origin.5725
			}
		}
	}
}
# Preparing a Dissolution of the Empire
country_event = {
	id = gotc.5729

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_imperial_vassal_overlord
	}

	immediate = {
		while = { # add fleet up to naval cap
			limit = { used_naval_capacity_percent < 0.95 }
			create_fleet_from_naval_cap = 0.1
		}
		every_system_within_border = {
			set_star_flag = ex_overlord_system
		}
		if = {
			limit = {
				event_target:origin_imperial_homeland = { has_planet_flag = overlord_soviet }
			}
			every_owned_planet = {
				limit = { is_capital = yes }
				clear_global_event_target = origin_imperial_homeland
				remove_planet_flag = overlord_soviet
				set_planet_flag = previous_imperial_capital
			}
			every_owned_planet = {
				limit = { has_planet_flag = post_imperial_capital }
				set_capital = yes
				save_global_event_target_as = origin_imperial_homeland
				set_planet_flag = overlord_soviet
			}
		}
		country_event = {
			id = gotc.5730
			days = 1
		}
	}
}

# Dissolution of the Empire
country_event = { # Overlord Version
	id = gotc.5730

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_imperial_vassal_overlord
	}

	immediate = {
		save_event_target_as = previous_overlord
		set_country_flag = origin_imperial_vassal_ex_overlord
		set_origin = origin_default
		every_megastructure = {
			limit = {
				is_megastructure_type = gateway_derelict
			}
			solar_system = {
				spawn_megastructure = {
					type = "gateway_ruined"
					coords_from = prev
				}
			}
			remove_megastructure = this
		}
		if = {
			limit = {
				event_target:origin_imperial_homeland = { has_planet_flag = overlord_soviet }
			}
			set_empire_name = "Кукурузный Функционализм"
			set_adjective = "Кукурузн"
			clear_ethos = yes
			country_add_ethic = ethic_authoritarian
			country_add_ethic = ethic_fanatic_materialist
			change_government = {
				authority = auth_oligarchic
				remove_invalid_civics = yes
				civics = {
					civic = civic_functional_architecture
					civic = civic_corvee_system
					civic = civic_crafters
				}
			}
			change_country_flag = {
				icon={
					category="plantoid"
					file="plantoid_03.dds"
				}
				background={
					category="backgrounds"
					file="flag_BG_36.dds"
				}
				colors={
					"desert_yellow"
					"red"
					"black"
					"null"
				}
			}
			every_controlled_planet = {
				limit = { has_planet_flag = post_imperial_capital }
				set_name = "Целиноград"
			}
			ordered_system_within_border = {
				limit = { is_capital_system = yes }
				set_name = "Целиноград"
			}
			change_dominant_species = { species = event_target:post_imperial_species }
			create_leader = {
				# He's going to introduce you to the mother of Kuzma
				species = event_target:post_imperial_species
				class = official
				name = "Кукуруз"
				gender=male
				skill = 2
				set_age = 59
				traits = {
					trait = trait_ruler_architectural_sense
					trait = leader_trait_settler_3
					trait = leader_trait_stubborn
				}
			}
			set_male_ruler_title = "Десталинизатор"
			set_female_ruler_title = "Десталинизаторша"
			set_leader = last_created_leader
		}
		else_if = {
			limit = {
				event_target:origin_imperial_homeland = { has_planet_flag = overlord_post_soviet }
			}
			change_government = {
				authority = auth_dictatorial
				remove_invalid_civics = yes
				civics = {
					civic = civic_byzantine_bureaucracy
					civic = civic_police_state
					civic = civic_memorialist
				}
			}
		}
		remove_modifier = imperial_vassal_ai_modifier
		every_subject = { # Release and notify current subjects
			if = {
				limit = {
					is_ai = yes
				}
				set_subject_of = { who = none }
				if = {
					limit = {
						AND = {
							event_target:origin_imperial_homeland = { has_planet_flag = overlord_soviet }
							has_country_flag = gotc_mao
						}
					}
					add_opinion_modifier = {
						modifier = opinion_cracked_my_world
						who = root
					}
				}
				else_if = {
					limit = {
						AND = {
							event_target:origin_imperial_homeland = { has_planet_flag = overlord_post_soviet }
							capital_scope = {
								solar_system = {
									has_star_flag = kadyrov
								}
							}
						}
					}
					capital_scope = {
						add_modifier = {
							modifier = payback_unified_purpose
							days = 7200
							clear_on_owner_change = yes
						}
					}
				}
			}
			country_event = { id = origin.5735 }
		}
		#capital_scope = { solar_system = { set_star_flag = ex_overlord_system } }
		every_owned_planet = {
			limit = { solar_system = { is_capital_system = no } }
			if = {
				limit = {
					solar_system = { is_owned_by = root }
				}
				create_imperial_splinter = yes
			}
		}
		while = {
			limit = {
				any_system_within_border = {
					NAND = {
						is_capital_system = yes
						any_country_neighbor_to_system = { has_country_flag = imperial_splinter }
					}
				}
			}
			every_playable_country = {
				limit = { has_country_flag = imperial_splinter }
				random_system_within_border = {
					limit = {
						#any_country_neighbor_to_system = { is_same_empire = root }
						any_neighbor_system = {
							is_owned_by = root
							is_capital_system = no
						}
					}
					random_neighbor_system = {
						limit = {
							is_owned_by = root
							is_capital_system = no
						}
						starbase = { set_owner = prevprevprev }
						#set_star_flag = ex_overlord_system
						#add_claims = { who = root num_of_claims = 1 show_notification = no}
					}
				}
			}
		}
		every_playable_country = {
			limit = { has_country_flag = origin_imperial_vassal_ex_overlord }
			# Survey every system of the former overlord
			every_system = {
				limit = { 
					has_star_flag = ex_overlord_system
					NOT = { is_owned_by = prev }
				}
				set_surveyed = { surveyed = yes surveyor = prev }
			}
			country_event = { id = gotc.5731 days = 1 }
		}

		create_fleet_from_naval_cap = 0.7

		every_playable_country = {
			limit = { has_country_flag = imperial_splinter }
			# Start a war with the previous Overlord
			declare_war = {
				target = root
				name = {
					key = "NAME_Imperial_War"
				}
				attacker_war_goal = wg_subjugation
			}
		}
	}
}

# Start Imperial Civil War
country_event = {
	id = gotc.5731

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# Add claims on every system of the former overlord
		every_system = {
			limit = { 
				has_star_flag = ex_overlord_system
				NOT = { is_owned_by = prev }
			}
			add_claims = { who = prev num_of_claims = 1 show_notification = yes }
			#set_star_flag = shall_be_claimed_by_@prev
		}
	}
}

#########################
# GALACTIC PARAGONS
#########################

country_event = { # Randomizing chance to get an ethic leader, with a grace factor that increase odds everytime it fails to give ethic leader to the player.
	id = gotc.40000
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_paragon_dlc = yes
		is_ai = no
		is_homicidal = no
		has_technology = tech_xeno_linguistics
		NOT = { has_country_flag = leader_recruited_recently }
	}

	immediate = {
		random_list = {
			1 = {
				modifier = {
					add = 2
					any_owned_starbase = { has_starbase_building = recruitment_office }
				}
				country_event = {
					id = gotc.40001 days = 1 random = 360
				}
			}
			0 = {
				modifier = {
					add = value:ethic_leader_lower_chance
				}
			}
		}
	}
}

# ADDING MORE ETHIC LEADERS #
# Put a 0 chance option for random_list, with added modifier of value ethic_leader_randomizer - remember to attach correct LEADER_ID to the value
# Add ethic_leader_hire_event into the random option - remember to attach correct LEADER_ID and issue a unique EVENT_ID
# Create an country event with corresponding EVENT_ID from the random_list - it's the message that will show up, if this leader is chosen from the lottery machine
# Create a follow up diplomacy event, with the hired leader for some more story about this leader (and to showcase his portrait)

country_event = { # ethic leader lottery machine
	id = gotc.40001
	hide_window = yes
	is_triggered_only = yes
	trigger = {
	}

	immediate = { # Chosing leaders to put them into the lottery machine, based on ethics
		random_list = { # Putting leaders inside the lottery machine, and taking out those who are already hired
			0 = { # Pylesos
				modifier = {
					add = 1
					root = {
						AND = {
							OR = {
								NOT = { is_xenophobe = yes }
								owner_main_species = { is_feline_species = yes }
							}
							has_global_flag = mad_vacuum_cleaner
							has_country_flag = dismissed_mad_vacuum_cleaner
						}
					}
					#add = value:ethic_leader_randomizer|ETHIC|xenophile|LEADER_ID|xenophile_leader_1|
				}
				ethic_leader_hire_event = { LEADER_ID = mad_vacuum_cleaner EVENT_ID = gotc.40100 }
			}
		}
	}
}

country_event = { # Pylesos hire
	id = gotc.40100
	title = "gotc.40100.name"
	desc = "gotc.40100.desc"
	show_sound = event_scanner
	is_triggered_only = yes

	picture = GFX_leader_recruitment_bg_renowned
	auto_opens = no
	event_window_type = leader_recruit
	notification_event_icon = "GFX_message_leader_recruitment_mad_vacuum_cleaner"

	immediate = {
		if = {
			limit = { owner_main_species = { is_feline_species = yes } }
			ethic_leader_creator = {
				SPECIES_CLASS = MACHINE
				LEADER_PORTRAIT = synth_machine_03
				CLASS = scientist
				NAME = NAME_mad_vacuum_cleaner
				LEVEL = 4
				GENDER = male
				IMMORTAL = no
				ETHIC = xenophobe
				DESC = mad_vacuum_cleaner
				CATCH_PHRASE = mad_vacuum_cleaner_catch_phrase
			}
		}
		else = {
			ethic_leader_creator = {
				SPECIES_CLASS = MACHINE
				LEADER_PORTRAIT = synth_machine_03
				CLASS = scientist
				NAME = NAME_mad_vacuum_cleaner
				LEVEL = 4
				GENDER = male
				IMMORTAL = no
				ETHIC = xenophile
				DESC = mad_vacuum_cleaner
				CATCH_PHRASE = mad_vacuum_cleaner_catch_phrase
			}
		}
		last_created_leader = {
			add_trait = {
				trait = subclass_scientist_governor
				trait = leader_trait_virtual
				trait = leader_trait_tomcat_insight
				trait = leader_trait_sanitary_drone
				trait = leader_trait_stubborn_2
				trait = leader_trait_intolerant
				trait = leader_trait_eager
				trait = leader_trait_environmental_engineer
				trait = leader_trait_society_focus_3
				show_message = no
			}
			set_age = 216
		}
	}

	picture_event_data = {
		portrait = event_target:ethic_leader
		room = ethic_spaceship_room
	}

	option = {
		name = DISMISS
		tag = dismiss_leader
		hidden_effect = {
			remove_global_flag = mad_vacuum_cleaner
			ethic_leader_kill_effect = yes
			set_country_flag = dismissed_mad_vacuum_cleaner
		}
	}
	option = {
		name = gotc.40100.a
		response_text = gotc.40100.a.response
		is_dialog_only = yes
	}
	option = {
		name = gotc.40100.b
		trigger = { NOT = { owner_main_species = { is_feline_species = yes } } }
		response_text = gotc.40100.b0.response
		is_dialog_only = yes
	}
	option = {
		name = gotc.40100.b
		trigger = { owner_main_species = { is_feline_species = yes } }
		response_text = gotc.40100.b1.response
		is_dialog_only = yes
	}
	option = {
		name = gotc.40100.c
		trigger = {
			is_xenophile = yes
		}
		response_text = gotc.40100.c.response
		is_dialog_only = yes
	}
	option = {
		name = gotc.40100.d
		trigger = { NOT = { owner_main_species = { is_feline_species = yes } } }
		response_text = gotc.40100.d.response
		is_dialog_only = yes
	}
	option = {
		name = gotc.40100.e
		trigger = { NOT = { owner_main_species = { is_feline_species = yes } } }
		response_text = gotc.40100.e.response
		is_dialog_only = yes
	}
	option = {
		name = gotc.40100.f
		trigger = {
			NOT = { is_xenophile = yes }
			NOT = { owner_main_species = { is_feline_species = yes } }
		}
		response_text = gotc.40100.f.response
		is_dialog_only = yes
	}
	option = {
		name = gotc.40100.g
		trigger = { is_materialist = yes }
		response_text = gotc.40100.g.response
		is_dialog_only = yes
	}
	option = {
		name = gotc.40100.h
		trigger = { is_spiritualist = yes }
		response_text = gotc.40100.h.response
		is_dialog_only = yes
	}
	option = {
		name = gotc.40100.i
		response_text = gotc.40100.i.response
		is_dialog_only = yes
	}
	option = {
		name = gotc.40100.j
		trigger = {
			has_origin = origin_necrophage
			NOT = { owner_main_species = { is_feline_species = yes } }
		}
		response_text = gotc.40100.j.response
		is_dialog_only = yes
	}
	option = {
		name = HIRE
		tag = hire_leader
		custom_tooltip = gotc.40100.hire_custom_tooltip
		every_owned_leader = {
			limit = {
				leader_class = scientist
				NOT = { has_trait = leader_trait_sapient_AI_assistant }
			}
			if = {
				limit = { has_trait = leader_trait_custom_AI_assistant }
				remove_trait = leader_trait_custom_AI_assistant
				add_trait = {
					trait = leader_trait_sapient_AI_assistant
					show_message = no
				}
			}
			else = {
				add_trait = {
					trait = leader_trait_custom_AI_assistant
					show_message = no
				}
			}
		}
		hidden_effect = {
			ethic_leader_hire_effect = {
				GLOBAL_EVENT_TARGET = renowned_mad_vacuum_cleaner
			}
			check_country_flags_mad_vacuum_cleaner = yes
		}
	}
}

leader_event = { # invite cats
	id = gotc.40101
	title = gotc.40101.name
	desc = gotc.40101.desc
	#picture = GFX_evt_but_they_are_cute
	show_sound = event_default
	diplomatic = yes
	is_triggered_only = yes
	custom_gui = "enclave_caravaneer_window"

	#event_window_type = leader_story
	#event_picture_background = "GFX_leader_recruitment_bg_renowned"

	picture_event_data = {
		portrait = root
		room = enclave_artist_room
	}

	immediate = {
		if = { # Are there cats in the galaxy?
			limit = {
				any_galaxy_species = {
					is_feline_species = yes
					is_robotic = no
					OR = {
						is_sapient = yes
						has_trait = trait_nascent_stage
					}
				}
			}
			random_galaxy_species = {
				limit = {
					is_feline_species = yes
					is_robotic = no
					OR = {
						is_sapient = yes
						has_trait = trait_nascent_stage
					}
				}
				weights = {
					base = 1
					modifier = {
						add = 100
						has_trait = trait_charismatic
					}
				}
				save_event_target_as = invited_feline_specie
			}
		}
		else = { # No cats!.. What's the point of this galaxy to even exist?
			create_species = { # Now it has finally got the purpose
				name = {
					key="Ситцевый Кот"
					literal=yes
				}
				plural = {
					key="Ситцевые Коты"
					literal=yes
				}
				adjective = {
					key="Котск"
					literal=yes
				}
				class = "MAM"
				portrait = "mam14"
				name_list="MAM2"
				traits = {
					ideal_planet_class = pc_continental
					trait = "trait_charismatic"
					trait = "trait_unruly"
					trait = "trait_nomadic"
					trait = "trait_rapid_breeders"
					trait = "trait_solitary"
				}
			}
			last_created_species = {
				save_event_target_as = invited_feline_specie
			}
		}
	}

	option = {
		name = gotc.40101.a
		response_text = gotc.40101.a.response
		is_dialog_only = yes
	}
	
	option = {
		name = gotc.40101.b
		trigger = {
			owner = {
				NOT = { is_xenophile = yes }
			}
		}
		response_text = gotc.40101.b.response
		is_dialog_only = yes
	}
	
	option = {
		name = gotc.40101.c
		response_text = gotc.40101.c.response
		is_dialog_only = yes
	}
	
	option = {
		name = gotc.40101.d
		trigger = {
			owner = {
				is_xenophile = yes
			}
		}
		response_text = gotc.40101.d.response
		is_dialog_only = yes
	}
	
	option = {
		name = gotc.40101.e
		trigger = {
			owner = {
				NOT = { is_xenophile = yes }
			}
		}
		response_text = gotc.40101.e.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40101.f
		trigger = {
			owner = {
				is_spiritualist = yes
			}
		}
		response_text = gotc.40101.f.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40101.g
		trigger = {
			owner = {
				is_materialist = yes
			}
		}
		response_text = gotc.40101.g.response
		is_dialog_only = yes
	}
	
	option = {
		name = gotc.40101.h
		response_text = gotc.40101.h.response
		is_dialog_only = yes
	}

	option = { # take cats
		name = gotc.40101.i
		owner = {
			if = { # No planets habitable for cats
				limit = {
					NOT = { any_owned_planet = { habitability = { who = event_target:invited_feline_specie value > 0 } } }
				}
				modify_species = {
					species = event_target:invited_feline_specie
					add_trait = trait_adaptive
					effect = {
						save_event_target_as = invited_feline_specie
					}
				}
			}
			random_owned_planet = {
				limit = { habitability = { who = event_target:invited_feline_specie value > 0 } }
				weights = {
					base = 1
					modifier = {
						add = 10
						pop_amount > 22
					}
					modifier = {
						add = 10
						habitability = { who = event_target:invited_feline_specie value > 0.4 }
					}
					modifier = {
						add = 20
						habitability = { who = event_target:invited_feline_specie value > 0.6 }
					}
					modifier = {
						add = 80
						is_capital = yes
					}
				}
				create_pop_group = { # Onekotazh
					species = event_target:invited_feline_specie
				}
				create_pop_group = { # Twokotazh
					species = event_target:invited_feline_specie
				}
				create_pop_group = { # Threekotazh
					species = event_target:invited_feline_specie
				}
				every_owned_pop_group = { # Everyone on the planet is getting a bit happier and more xenophilic. Except for cats, cats don't care
					limit = { NOT = { is_feline_species = yes } }
					add_modifier = { modifier = gift_from_mysterious_benefactors years = 5 }
				}
			}
			every_owned_leader = {
				limit = {
					NOR = {
						has_ethic = ethic_xenophobe
						has_leader_flag = renowned_mad_vacuum_cleaner
						has_trait = leader_trait_emotional_support_pet
					}
				}
				add_trait = {
					trait = leader_trait_emotional_support_pet
				}
			}
		}
		hidden_effect = {
			owner = {
				set_country_flag = cats_invited
				check_country_flags_mad_vacuum_cleaner = yes
			}
		}
	}

	option = { # reject cats
		name = gotc.40101.j
		add_negative_trait_mad_vacuum_cleaner = yes
		default_hide_option = yes
	}
}

leader_event = { # cats full citizenship
	id = gotc.40105
	title = gotc.40105.name
	desc = gotc.40105.desc
	#picture = GFX_evt_alien_segregation
	show_sound = event_default
	diplomatic = yes
	is_triggered_only = yes
	custom_gui = "enclave_caravaneer_window"

	#event_window_type = leader_story
	#event_picture_background = "GFX_leader_recruitment_bg_renowned"

	picture_event_data = {
		portrait = root
		room = enclave_artist_room
	}

	immediate = {

	}

	option = {
		name = gotc.40105.a
		trigger = {
			owner = {
				is_authoritarian = yes
			}
		}
		response_text = gotc.40105.a.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40105.b
		trigger = {
			owner = {
				NOT = { is_egalitarian = yes }
			}
		}
		response_text = gotc.40105.b.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40105.c
		trigger = {
			owner = {
				NOT = {
					any_owned_species = {
						is_feline_species = yes
						is_robotic = no
						OR = {
							is_sapient = yes
							has_trait = trait_nascent_stage
						}
						OR = {
							has_citizenship_type = { type = citizenship_slavery country = prev }
							has_citizenship_type = { type = citizenship_purge country = prev }
							has_citizenship_type = { type = citizenship_purge_machine country = prev }
						}
					}
				}
			}
		}
		response_text = gotc.40105.c.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40105.d
		trigger = {
			owner = {
				NOT = { is_democratic_authority = yes }
			}
		}
		response_text = gotc.40105.d.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40105.e
		trigger = {
			owner = {
				NOT = { is_democratic_authority = yes }
			}
		}
		response_text = gotc.40105.e.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40105.f
		response_text = gotc.40105.f.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40105.g
		response_text = gotc.40105.g.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40105.h
		trigger = {
			owner = {
				is_egalitarian = yes
			}
		}
		response_text = gotc.40105.h.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40105.i
		trigger = {
			owner = {
				NOT = { is_xenophile = yes }
			}
		}
		response_text = gotc.40105.i.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40105.j
		allow = {
			owner = {
				NOT = {
					any_owned_species = {
						is_feline_species = yes
						is_robotic = no
						OR = {
							is_sapient = yes
							has_trait = trait_nascent_stage
						}
						NOR = {
							has_citizenship_type = { type = citizenship_full country = prev }
							has_citizenship_type = { type = citizenship_full_machine country = prev }
						}
					}
				}
			}
		}
		owner = {
			add_modifier = { modifier = health_discovery years = 5 }
		}
	}

	option = {
		name = gotc.40105.k
		add_negative_trait_mad_vacuum_cleaner = yes
		owner = {
			every_owned_planet = {
				limit = { any_owned_species = { is_feline_species = yes } }
				add_modifier = { modifier = pheromoned_grief years = 5 }
			}
		}
		default_hide_option = yes
	}
}

leader_event = { # cat leader
	id = gotc.40110
	title = gotc.40110.name
	desc = gotc.40110.desc
	show_sound = event_default
	diplomatic = yes
	is_triggered_only = yes
	custom_gui = "enclave_caravaneer_window"

	picture_event_data = {
		portrait = root
		room = enclave_artist_room
	}

	immediate = {

	}

	option = {
		name = gotc.40110.a
		response_text = gotc.40110.a.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40110.b
		trigger = {
			owner = {
				NOT = { is_xenophile = yes }
			}
		}
		response_text = gotc.40110.b.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40110.c
		trigger = {
			owner = {
				is_materialist = yes
			}
		}
		response_text = gotc.40110.c.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40110.d
		response_text = gotc.40110.d.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40110.e
		response_text = gotc.40110.e.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40110.f
		trigger = {
			owner = {
				is_spiritualist = yes
			}
		}
		response_text = gotc.40110.f.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40110.g
		response_text = gotc.40110.g.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40110.h
		response_text = gotc.40110.h.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40110.i
		response_text = gotc.40110.i.response
		is_dialog_only = yes
	}

	option = {
		name = gotc.40110.j
		owner = {
			if = {
				limit = { any_pool_leader = { species = { is_feline_species = yes } } }
				random_pool_leader = {
					limit = { species = { is_feline_species = yes } }
					weights = {
						base = 1
						modifier = {
							add = 100
							has_trait = trait_ruler_charismatic
						}
					}
					save_event_target_as = hired_cat_leader
					prev = { assign_leader = event_target:hired_cat_leader }
				}
			}
			else = {
				if = {
					limit = { any_owned_species = { is_feline_species = yes } }
					random_owned_species = {
						limit = { is_feline_species = yes }
						save_event_target_as = randomly_chosen_feline_specie
					}
				}
				else = {
					random_galaxy_species = {
						limit = {
							is_feline_species = yes
							is_robotic = no
							OR = {
								is_sapient = yes
								has_trait = trait_nascent_stage
							}
						}
						weights = {
							base = 1
							modifier = {
								add = 100
								has_trait = trait_charismatic
							}
						}
						save_event_target_as = randomly_chosen_feline_specie
					}
				}
				create_leader = {
					# All Hail Gorongoron!
					species = event_target:randomly_chosen_feline_specie
					class = scientist
					name = "Горонгорон"
					gender = male
					skill = 1
					set_age = 32
					traits = {
						trait = trait_ruler_charismatic_2
					}
				}
				last_created_leader = {
					save_event_target_as = hired_cat_leader
					set_leader_flag = leader_gorongoron
				}
			}
			event_target:hired_cat_leader = {
				add_skill = 1
				if = {
					limit = { leader_class = scientist }
					add_trait = {
						trait = leader_trait_sapient_AI_assistant
					}
				}
				else = {
					add_trait = {
						trait = trait_ruler_charismatic_2
					}
				}
			}
			every_owned_leader = {
				limit = {
					leader_class = scientist
					NOT = { has_trait = leader_trait_sapient_AI_assistant }
					NOT = { has_trait = leader_trait_tomcat_insight }
				}
				if = {
					limit = { has_trait = leader_trait_custom_AI_assistant }
					remove_trait = leader_trait_custom_AI_assistant
					add_trait = {
						trait = leader_trait_sapient_AI_assistant
					}
				}
				else = {
					add_trait = {
						trait = leader_trait_custom_AI_assistant
					}
				}
			}
			add_modifier = { modifier = alien_appreciation years = 5 }
		}
		hidden_effect = {
			owner = {
				set_country_flag = cat_leader_hired
				check_country_flags_mad_vacuum_cleaner = yes
			}
			#alien_infection pop modifier allergy
		}
	}

	option = {
		name = gotc.40110.k
		add_negative_trait_mad_vacuum_cleaner = yes
		owner = {
			every_owned_planet = {
				limit = { any_owned_species = { is_feline_species = yes } }
				add_modifier = { modifier = pheromoned_grief years = 5 }
			}
		}
		default_hide_option = yes
	}
}

###### Renowned leader events ######
# Fires from on_five_year_pulse_country
country_event = {
	id = gotc.41234
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_paragon_dlc = yes
	}

	immediate = {
		random_owned_leader = {
			limit = { has_leader_flag = renowned_leader }
			switch = {
				trigger = has_leader_flag
				renowned_mad_vacuum_cleaner = { # Pylesos
					save_event_target_as = pylesos
					root = {
						check_country_flags_mad_vacuum_cleaner = yes
						if = {
							limit = {
								NOR = {
									has_country_flag = has_feline_species
									has_country_flag = cats_invited
								}
							}
							event_target:pylesos = { leader_event = { id = gotc.40101 days = 1 random = 225 } } # invite cats
						}
						else_if = {
							limit = {
								any_owned_species = {
									is_feline_species = yes
									is_robotic = no
									OR = {
										is_sapient = yes
										has_trait = trait_nascent_stage
									}
									NOR = {
										has_citizenship_type = { type = citizenship_full country = prev }
										has_citizenship_type = { type = citizenship_full_machine country = prev }
									}
								}
								NOT = { has_country_flag = feline_country }
							}
							event_target:pylesos = { leader_event = { id = gotc.40105 days = 1 random = 225 } } # cats full citizenship
						}
						else_if = {
							limit = {
								NOT = { has_country_flag = feline_country }
								NOT = { has_country_flag = cat_leader_hired }
								NOT = { any_owned_leader = { species = { is_feline_species = yes } } }
								exists = ruler
								NOT = { ruler = { species = { is_feline_species = yes } } }
							}
							event_target:pylesos = { leader_event = { id = gotc.40110 days = 1 random = 225 } } # cat leader
						}
						else_if = {
							limit = {
								NOT = { ruler = { species = { is_feline_species = yes } } }
							}
							#event_target:pylesos = { leader_event = { id = gotc.40115 days = 1 random = 225 } } # cat ruler
						}
						else = {
							#event_target:pylesos = { leader_event = { id = gotc.40120 days = 1 random = 225 } } # feline monarchy
						}
					}
				}
			}
		}
	}
}